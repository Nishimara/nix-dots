diff --git a/src/main.rs b/src/main.rs
index c0543ac..793adf7 100644
--- a/src/main.rs
+++ b/src/main.rs
@@ -29,7 +29,7 @@ fn main() -> Result<()> {
 fn self_elevate() -> ! {
     use std::os::unix::process::CommandExt;
 
-    let mut cmd = std::process::Command::new("sudo");
+    let mut cmd = std::process::Command::new("doas");
     cmd.args(std::env::args());
     debug!("{:?}", cmd);
     let err = cmd.exec();
diff --git a/src/nixos.rs b/src/nixos.rs
index 02733bc..0182793 100644
--- a/src/nixos.rs
+++ b/src/nixos.rs
@@ -30,19 +30,19 @@ impl NHRunnable for interface::OsArgs {
 
 impl OsSubcommandArgs {
     pub fn rebuild(&self, rebuild_type: &OsCommandType) -> Result<()> {
-        let use_sudo = if self.bypass_root_check {
+        let use_doas = if self.bypass_root_check {
             warn!("Bypassing root check, now running nix as root");
             false
         } else {
             if nix::unistd::Uid::effective().is_root() {
-                bail!("Don't run nh os as root. I will call sudo internally as needed");
+                bail!("Don't run nh os as root. I will call doas internally as needed");
             }
             true
         };
 
         // TODO: add a  .maybe_arg to CommandBuilder
         // so that I can do .maybe_arg( Option<T> )
-        let sudo_args: &[_] = if use_sudo { &["sudo"] } else { &[] };
+        let doas_args: &[_] = if use_doas { &["doas"] } else { &[] };
 
         let hostname = match &self.hostname {
             Some(h) => h.to_owned(),
@@ -147,7 +147,7 @@ impl OsSubcommandArgs {
             let switch_to_configuration = switch_to_configuration.to_str().unwrap();
 
             commands::CommandBuilder::default()
-                .args(sudo_args)
+                .args(doas_args)
                 .args([switch_to_configuration, "test"])
                 .message("Activating configuration")
                 .build()?
@@ -156,7 +156,7 @@ impl OsSubcommandArgs {
 
         if let Boot(_) | Switch(_) = rebuild_type {
             commands::CommandBuilder::default()
-                .args(sudo_args)
+                .args(doas_args)
                 .args(["nix-env", "--profile", SYSTEM_PROFILE, "--set"])
                 .args([out_path.get_path()])
                 .build()?
@@ -170,7 +170,7 @@ impl OsSubcommandArgs {
             let switch_to_configuration = switch_to_configuration.to_str().unwrap();
 
             commands::CommandBuilder::default()
-                .args(sudo_args)
+                .args(doas_args)
                 .args([switch_to_configuration, "boot"])
                 .message("Adding configuration to bootloader")
                 .build()?
